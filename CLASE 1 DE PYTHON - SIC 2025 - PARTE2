{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPVleWOgc8vE20tpg6NE5yR"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# **MÉTODOS AVANZADOS DE DICCIONARIOS EN PYTHON**"],"metadata":{"id":"gGkUPEa6VsOa"}},{"cell_type":"markdown","source":["Los metodos avanzados dentro del uso de diccionarios que estaremos abarcando seran setdefault, update, pop, popitem, clear, get, join, clist, lower, upper, capitalize, startwith, endwith..."],"metadata":{"id":"9Z-cKhNTVvs1"}},{"cell_type":"markdown","source":["**setdefault()**\n","\n","> Qué es: Es un método que devuelve el valor de una clave si existe. Si no existe, inserta la clave con un valor por defecto.\n","\n","> Para qué sirve: Evita errores al acceder a claves inexistentes y asegura que siempre haya un valor asociado.\n","\n","**Sintaxis:**\n","\n","    diccionario.setdefault(clave, valor_predeterminado)"],"metadata":{"id":"YRqr6fXnWDnF"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"K80YZml_Vg-p"},"outputs":[],"source":["persona = {\"nombre\": \"Ana\", \"edad\": 25}\n","print(persona.setdefault(\"edad\", 30))   # 25 (ya existía)\n","print(persona.setdefault(\"ciudad\", \"Madrid\"))  # Inserta ciudad\n","print(persona)"]},{"cell_type":"markdown","source":["> **update()**\n","\n","Qué es:\n","Actualiza un diccionario con otro. Si las claves ya existen, sus valores son reemplazados.\n","\n","**Sintaxis:**\n","\n","    diccionario.update(otro_diccionario)\n","\n"],"metadata":{"id":"b8LleLuqWVeS"}},{"cell_type":"code","source":["d1 = {\"a\": 1, \"b\": 2}\n","d2 = {\"b\": 3, \"c\": 4}\n","\n","d1.update(d2)\n","\n","print(d1)"],"metadata":{"id":"PIwIs2koWm-u"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["> **clear()**\n","\n","Qué es:\n","Vacía el diccionario por completo."],"metadata":{"id":"Yk43ffrRWghD"}},{"cell_type":"code","source":["d = {\"x\": 10, \"y\": 20}\n","print(d)\n","print(\"-----\")\n","d.clear()\n","print(d)  # {}"],"metadata":{"id":"zyTGlqBCWjHC"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["> **values() y items()**\n","\n","* values() devuelve solo los valores.\n","\n","* items() devuelve pares clave-valor en forma de tuplas."],"metadata":{"id":"7oa5Sp85WxSe"}},{"cell_type":"code","source":["d = {\"a\": 1, \"b\": 2}\n","print(d.values())  # dict_values([1, 2])\n","for k, v in d.items():\n","    print(k, v)"],"metadata":{"id":"1bi7zteNW1wo"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":[">**Metodos POP y POPITEM**\n","\n","**pop()**\n","\n","Qué hace?: elimina una clave específica y devuelve su valor.\n","\n","Por qué usarlo: es útil cuando necesitas quitar un dato del diccionario pero también usar ese valor en tu programa.\n","\n","**Sintaxis:**\n","\n","     diccionario.pop(clave, valor_por_defecto)\n","\n","\n","* Si la clave existe → devuelve el valor y elimina la clave.\n","\n","* Si no existe y se da valor_por_defecto → devuelve ese valor en lugar de error."],"metadata":{"id":"Dm3bHfGRYDB4"}},{"cell_type":"code","source":["alumno = {\"nombre\": \"Ana\", \"edad\": 20, \"nota\": 9}\n","nota = alumno.pop(\"nota\")\n","print(\"Nota eliminada:\", nota)       # 9\n","print(\"Diccionario actualizado:\", alumno)"],"metadata":{"id":"6-XOT8y6YQqn"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**popitem()**\n","\n","Qué hace?: elimina y devuelve el último par clave-valor insertado en forma de tupla.\n","\n","Por qué usarlo: sirve en estructuras dinámicas, como cuando vas procesando datos en orden de inserción.\n","\n","**Sintaxis:**\n","\n","     diccionario.popitem()"],"metadata":{"id":"DWchJaurYRIs"}},{"cell_type":"code","source":["d = {\"a\": 1, \"b\": 2, \"c\": 3}\n","ultimo = d.popitem()\n","print(\"Eliminado:\", ultimo)   # ('c', 3)\n","print(\"Diccionario restante:\", d)"],"metadata":{"id":"r6inbwKqYZ5b"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# **Métodos de cadenas útiles al trabajar con diccionarios**"],"metadata":{"id":"GGdojlR_W4x2"}},{"cell_type":"markdown","source":["Muchas veces se usan para limpiar o transformar datos de entrada.\n","\n","* **split()**: divide una cadena en lista.\n","\n","* **lstrip() y rstrip()**: eliminan espacios a la izquierda o derecha.\n","\n","* **join()**: une elementos de una lista en una cadena.\n","\n","* **lower(), upper(), capitalize()**: cambian mayúsculas y minúsculas.\n","\n","* **startswith(), endswith()**: verifican si una cadena comienza o termina con cierto patrón."],"metadata":{"id":"Oo5BCh6mW7N4"}},{"cell_type":"code","source":["#split\n","texto = \"rojo/verde/azul\"\n","print(texto)\n","lista = texto.split(\"/\")\n","print(lista)"],"metadata":{"id":"zRMKKm9BYyBP"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# lstrip() y rstrip()\n","texto = \"   hola   \"\n","print(texto.lstrip())  # 'hola   '\n","print(texto.rstrip())  # '   hola'\n","print(texto.strip())   # 'hola' (quita ambos lados)\n"],"metadata":{"id":"46kZWD8Jxp2T"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#join\n","frutas = [\"manzana\", \"pera\", \"uva\"]\n","cadena = \"/ \".join(frutas)\n","print(cadena)"],"metadata":{"id":"OdPEBNNxxpmu"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["> **lower(), upper(), capitalize()**\n","\n","Qué hacen: cambian mayúsculas y minúsculas.\n","\n","* lower() → todo en minúscula.\n","\n","* upper() → todo en mayúscula.\n","\n","* capitalize() → primera letra en mayúscula y el resto en minúscula."],"metadata":{"id":"sBrgXDhuZDiC"}},{"cell_type":"code","source":["texto = \"hOlA mUnDo\"\n","print(texto.lower())      # hola mundo\n","print(texto.upper())      # HOLA MUNDO\n","print(texto.capitalize()) # Hola mundo"],"metadata":{"id":"1M13WoEUZJLd"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**startswith() y endswith()**\n","\n","* Verifican si una cadena empieza o termina con un patrón.\n","\n","* Devuelven True o False."],"metadata":{"id":"OyyBJ-1wZS-Z"}},{"cell_type":"code","source":["cadena = \"python_programacion.py\"\n","print(cadena.startswith(\"python\"))  # True\n","print(cadena.endswith(\".py\"))       # True\n","print(cadena.endswith(\".txt\"))      # False"],"metadata":{"id":"hn5_-GM-ZYQ8"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# **CREACION DE DICCIONARIOS A PARTIR DE LISTAS O TUPLAS**"],"metadata":{"id":"Dq4okDx2XE0A"}},{"cell_type":"markdown","source":["Para realizar esto python nos permite usar el metodo dic.fromkeys()\n","\n","    dict.fromkeys()\n","\n","Crea un diccionario con claves a partir de una lista o tupla. Los valores se inicializan en None o en un valor dado."],"metadata":{"id":"bpldHR4uXK8m"}},{"cell_type":"code","source":["keys = [\"a\", \"b\", \"c\"]\n","d = dict.fromkeys(keys)\n","print(d)"],"metadata":{"id":"1fkLmtxpXcXv"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["keys = (\"a\", \"b\", \"c\")\n","d = dict.fromkeys(keys, 100)\n","print(d)"],"metadata":{"id":"YBV92MvZXfvM"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["\n","\n","---\n","\n"],"metadata":{"id":"7fL1ypaWYr9p"}},{"cell_type":"markdown","source":["    defaultdict (del módulo collections)\n","\n","Es un diccionario que asigna automáticamente un valor por defecto cuando la clave no existe."],"metadata":{"id":"lT3DsPFEXjvi"}},{"cell_type":"code","source":["from collections import defaultdict\n","\n","d = defaultdict(int)\n","print(d[\"x\"])  # 0 (valor por defecto)\n"],"metadata":{"id":"pAuiwrK_XoXr"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from collections import defaultdict\n","\n","list_dict = defaultdict(list)\n","list_dict[\"a\"].append(1)\n","print(list_dict)  # defaultdict(<class 'list'>, {'a': [1]})\n"],"metadata":{"id":"ujX7KiETXp2I"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# **Diccionarios Dobles y Copias-Asignacion**"],"metadata":{"id":"sbV2iuDbXwZi"}},{"cell_type":"markdown","source":["**¿Qué es?**\n","\n","> Es un diccionario que contiene otros diccionarios como valores.\n","\n","**¿Por qué usarlo?**\n","\n","> Para representar estructuras jerárquicas o complejas (ejemplo: información de alumnos, configuración de un sistema).\n","\n","Ademas este facilita organizar datos relacionados.\n","\n","**Sintaxis:**\n","\n","    dic = {\n","      \"clave1\": {\"subclave1\": valor, \"subclave2\": valor},\n","      \"clave2\": {\"subclave1\": valor}\n","    }\n"],"metadata":{"id":"oiEWUlWJZbMx"}},{"cell_type":"code","source":["alumnos = {\n","    \"Ana\": {\"edad\": 20, \"nota\": 9},\n","    \"Luis\": {\"edad\": 22, \"nota\": 8},\n","}\n","\n","print(alumnos[\"Ana\"][\"nota\"])\n"],"metadata":{"id":"7o4SfJqpZmzr"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Otro ejemplo de uso es la creacion de agendas telefonicas"],"metadata":{"id":"-mrOAmJRbAVA"}},{"cell_type":"code","source":["agenda = {\n","    \"Marta\": {\"email\": \"marta@correo.com\", \"telefonos\": [\"600-111\", \"600-222\"]},\n","    \"Pedro\": {\"email\": \"pedro@correo.com\", \"telefonos\": [\"700-333\"]},\n","}\n","\n","# Añadir otro teléfono a Marta\n","agenda[\"Pedro\"][\"telefonos\"].append(\"555-332\")\n","\n","# Mostrar teléfonos de cada contacto\n","for nombre, info in agenda.items():\n","    print(nombre, \":\", \", \".join(info[\"telefonos\"]))\n"],"metadata":{"id":"U6wzw6SOa_cj"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# **COPIA Y ASIGNACION EN DICCIONARIOS**"],"metadata":{"id":"zzADTIyMZw9J"}},{"cell_type":"markdown","source":["Cuando copiamos un diccionario, es importante saber si es copia superficial o copia profunda:\n","\n","**Copia superficial (copy())** : Solo copia el diccionario externo; los diccionarios internos siguen siendo referencias."],"metadata":{"id":"HHNb-T5kZ34U"}},{"cell_type":"markdown","source":[">**Importante! : Que son referencias en Python?**\n","En Python, una referencia interna en memoria significa que una variable (como un diccionario) no apunta a un objeto nuevo e independiente, sino que comparte la misma dirección de memoria que otro objeto existente. Cuando se usa copy() para diccionarios, esto provoca una copia superficial, donde el nuevo diccionario es un objeto separado, pero si contiene objetos mutables anidados (como otras listas o diccionarios), esos objetos anidados seguirán compartiendo referencias internas con los del diccionario original.\n","\n","Les dejo una referencia por si desean ampliar el concepto: [Click aqui](https://www-geeksforgeeks-org.translate.goog/python/pass-by-reference-vs-value-in-python/?_x_tr_sl=en&_x_tr_tl=es&_x_tr_hl=es&_x_tr_pto=sge#:~:text=¿Qué%20es%20pasar%20por%20referencia,reflejará%20también%20en%20el%20exterior.&text=Explicación:%20Tanto%20la%20lista%20dentro,la%20lista%20permanece%20sin%20cambios.&text=Explicación:%20La%20función%20reasigna%20la,objeto%20original%2C%20que%20permanece%20inalterado.)"],"metadata":{"id":"Ri5-550H6hII"}},{"cell_type":"code","source":["d1 = {\"a\": {\"x\": 1}}\n","d2 = d1.copy()\n","d2[\"a\"][\"x\"] = 99\n","print(d1)\n","print(d2)"],"metadata":{"id":"jCLN16ujaDJH"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**Copia profunda (deepcopy())** : Copia todo el contenido, incluidos los diccionarios internos."],"metadata":{"id":"MPS-oXgJaMzq"}},{"cell_type":"code","source":["import copy\n","d1 = {\"a\": {\"x\": 1}}\n","d2 = copy.deepcopy(d1)\n","d2[\"a\"][\"x\"] = 80\n","\n","print('-------')\n","print(d1)\n","print(d2)\n"],"metadata":{"id":"3ybmVaLXaHH_"},"execution_count":null,"outputs":[]}]}